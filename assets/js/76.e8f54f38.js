(window.webpackJsonp=window.webpackJsonp||[]).push([[76],{370:function(e,t,o){"use strict";o.r(t);var a=o(15),n=Object(a.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"mapped-props-by-map-element"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mapped-props-by-map-element"}},[e._v("#")]),e._v(" mapped-props-by-map-element")]),e._v(" "),t("p",[t("a",{attrs:{name:"autocompleteMappedProps"}})]),e._v(" "),t("h2",{attrs:{id:"autocompletemappedprops"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#autocompletemappedprops"}},[e._v("#")]),e._v(" autocompleteMappedProps")]),e._v(" "),t("p",[e._v("This are GoogleMapsOptions that we want to have like\nprops in our Vue component.\nThis properties are in the way that GoogleMaps accept it\nand with extraneous properties for the VueJs API.\nIn a previous version of this plugin, to avoid repetition,\nwe created a .js file component with a "),t("code",[e._v("mappedProps")]),e._v(" key on it\nand used a variety of helper functions to clean it and bind it\nto Vue props and watch them, etc.\nTo day our primary main goal is get a more intuitive and descriptive\nAPI and a better documentation of it, following this goals we move\nthis extraneous properties to an independent file in order to consume\nit when is needed.\nPlease you need to remind that you need to create properties in the\ncorrespondent Vue component with the same names and the same values\nfor those properties that are not extraneous to Vue.")]),e._v(" "),t("p",[t("strong",[e._v("Kind")]),e._v(": global constant")])])}),[],!1,null,null,null);t.default=n.exports}}]);