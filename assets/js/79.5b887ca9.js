(window.webpackJsonp=window.webpackJsonp||[]).push([[79],{373:function(e,t,o){"use strict";o.r(t);var a=o(15),s=Object(a.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h2",{attrs:{id:"mapped-props"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mapped-props"}},[e._v("#")]),e._v(" Mapped props")]),e._v(" "),t("div",{staticClass:"custom-block warning"},[t("p",{staticClass:"custom-block-title"},[e._v("WARNING")]),e._v(" "),t("p",[e._v("We are trying to remove this approach and its possible that in major releases this will disappear.")])]),e._v(" "),t("p",[e._v("This are GoogleMapsOptions that we want to have like props in our Vue component.")]),e._v(" "),t("p",[e._v("This properties are in the way that GoogleMaps accept it and with extraneous properties for the VueJs API.\nIn a previous version of this plugin, to avoid repetition, we created a .js file component with a "),t("code",[e._v("mappedProps")]),e._v(" key on it and used a variety of helper functions to clean it and bind it to Vue props and watch them, etc.")]),e._v(" "),t("p",[e._v("To day our main goal is write a more intuitive, readable and descriptive API with a better documentation of it, following this goals we move this extraneous properties to an independent file in order to consume it when is needed.")]),e._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[e._v("For developers")]),e._v(" "),t("p",[e._v("You need to remind that you need to create properties in the correspondent Vue component with the same names and the same values for those properties that are not extraneous to Vue.")])])])}),[],!1,null,null,null);t.default=s.exports}}]);